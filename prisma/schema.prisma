generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  username       String?
  email          String    @unique
  email_verified DateTime? @map("email_verified")
  image          String?
  role           UserRole  @default(USER)
  created_at     DateTime  @default(now()) @map("created_at")
  updated_at     DateTime  @updatedAt @map("updated_at")

  // Relations
  accounts   Account[]
  sessions   Session[]
  items      Item[]
  audit_logs AuditLog[]

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
  REVIEWER
}

// NextAuth required tables
model Account {
  id                  String  @id @default(cuid())
  user_id             String  @map("user_id")
  type                String
  provider            String
  provider_account_id String  @map("provider_account_id")
  refresh_token       String? @map("refresh_token") @db.Text
  access_token        String? @map("access_token") @db.Text
  expires_at          Int?    @map("expires_at")
  token_type          String? @map("token_type")
  scope               String?
  id_token            String? @map("id_token") @db.Text
  session_state       String? @map("session_state")

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@map("accounts")
}

model Session {
  id            String   @id @default(cuid())
  session_token String   @unique @map("session_token")
  user_id       String   @map("user_id")
  expires       DateTime
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Predefined tags system
model Tag {
  id          String   @id @default(cuid())
  name        String   @unique // "AI", "Fintech", "Healthcare", etc.
  description String?
  risk_score  Int      @default(0) @map("risk_score") // Base risk score for this tag
  color       String   @default("#6B7280") // Hex color for UI
  is_active   Boolean  @default(true) @map("is_active")
  created_at  DateTime @default(now()) @map("created_at")
  updated_at  DateTime @updatedAt @map("updated_at")

  @@map("tags")
}

// Main business logic tables
model Item {
  id          String     @id @default(cuid())
  title       String
  description String     @db.Text
  amount      Decimal    @db.Decimal(12, 2)
  tags        String[] // Array of tag names ["AI", "Fintech"]
  status      ItemStatus @default(NEW)
  risk_score  Int?       @map("risk_score") // 0-100, calculated based on amount + tags
  created_at  DateTime   @default(now()) @map("created_at")
  updated_at  DateTime   @updatedAt @map("updated_at")

  // Relations
  created_by_id String     @map("created_by_id")
  created_by    User       @relation(fields: [created_by_id], references: [id])
  audit_logs    AuditLog[]

  @@map("items")
}

enum ItemStatus {
  NEW
  IN_REVIEW
  APPROVED
  REJECTED
}

// Rules for risk scoring (amount-based rules)
model Rule {
  id          String   @id @default(cuid())
  name        String
  description String?
  rule_type   RuleType @map("rule_type") // "AMOUNT_THRESHOLD", "TAG_MULTIPLIER", etc.
  condition   String // JSON string with rule logic
  score       Int // Points to add
  is_active   Boolean  @default(true) @map("is_active")
  created_at  DateTime @default(now()) @map("created_at")
  updated_at  DateTime @updatedAt @map("updated_at")

  @@map("rules")
}

enum RuleType {
  AMOUNT_THRESHOLD // If amount > X, add Y points
  TAG_MULTIPLIER // Multiply tag scores by factor
  COMBINATION // Special rules for tag combinations
}

// Audit log for tracking changes
model AuditLog {
  id         String   @id @default(cuid())
  action     String // "CREATED", "STATUS_CHANGED", "UPDATED", etc.
  old_value  String?  @map("old_value") // JSON string
  new_value  String?  @map("new_value") // JSON string
  created_at DateTime @default(now()) @map("created_at")

  // Relations
  item_id String @map("item_id")
  item    Item   @relation(fields: [item_id], references: [id])
  user_id String @map("user_id")
  user    User   @relation(fields: [user_id], references: [id])

  @@map("audit_logs")
}
